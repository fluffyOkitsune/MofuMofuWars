package mmw.database;

/** マップの地形 */
public enum Terrain {
	// 名前,待機可能か,通行可能か(飛行,騎馬,歩兵),重移動コスト,軽移動コスト,防御,回避,回復
	// 飛行ユニットは全ての地形の移動コストが1になるが、地形効果を得られない。
	平地("平地", "", true, 0b111, 1, 1, 0, 0, 0), //
	芝生("芝生", "敵の攻撃があたりやすい…", true, 0b111, 1, 1, 0, -10, 0), //
	荒地("荒地", "敵の攻撃があたりやすい…", true, 0b111, 3, 3, 0, -20, 0), //
	崖("崖", "歩いては入れない", true, 0b100, 1, 1, -10, -10, 0), // 飛行ユニットのみ進入可
	民家("民家", "敵の攻撃があたりにくい！", true, 0b111, 1, 1, 20, 20, 0), //
	林("林", "敵の攻撃があたりにくい！", true, 0b111, 2, 2, 10, 10, 0), //
	森("森", "敵の攻撃があたりにくい！", true, 0b100, 2, 1, 20, 20, 0), //
	沼("沼", "敵の攻撃があたりやすい…", true, 0b110, 3, 2, -20, -20, 0), //
	山("山", "敵の攻撃があたりにくい！", true, 0b111, 4, 4, -10, 30, 0), //
	高山("高山", "歩いては入れない", true, 0b100, 1, 1, -10, 40, 0), // 飛行ユニットのみ進入可

	海("海", "歩いては入れない…", true, 0b100, 255, 255, 0, -20, 0), // 飛行ユニットのみ進入可
	浅瀬("浅瀬", "敵の攻撃があたりやすい…", true, 0b101, 4, 2, -10, -10, 0), // 騎馬のみ進入不可
	砂浜("砂浜", "敵の攻撃があたりやすい…", true, 0b111, 2, 1, -10, -10, 0), //

	// 建物
	床("床", "", true, 0b111, 1, 1, 0, 0, 0), //
	壁("壁", "待機不可", false, 0b000, 0, 0, 0, 0, 0), //
	低い壁("低い壁", "歩いては入れない…", true, 0b100, 1, 1, 0, 0, 0), // 飛行ユニットのみ進入可
	絨毯("絨毯", "敵の攻撃があたりやすい…", true, 0b111, 1, 1, 0, -5, 0), //
	門("門", "敵の攻撃があたりにくい！", true, 0b111, 1, 1, 2, 20, 0), //
	柱("柱", "敵の攻撃があたりにくい！", true, 0b111, 1, 1, 1, 10, 0), //
	瓦礫("瓦礫", "敵の攻撃があたりやすい…", true, 0b111, 2, 2, 0, -10, 0), //

	// ダメージ床
	結界("結界", "傷を癒すことができる", true, 0b000, 1, 1, 0, 0, 20), //
	毒沼("毒沼", "ダメージを受ける…", true, 0b111, 3, 3, 0, -20, -20), //
	;

	/** 表示される地形の名前 */
	public final String name;
	/** 地形の説明 */
	public final String explain;
	/** 待機できるか */
	public final boolean canWait;
	/** 移動できるか */
	public final byte canMove;
	/** 重いユニットの移動コスト */
	public final byte costH;
	/** 軽いユニットの移動コスト */
	public final byte costL;
	/** 地形効果(防御) */
	public final byte guard;
	/** 地形効果(回避) */
	public final byte dodge;
	/** 回復値(割合) */
	public final byte cure;

	Terrain(String s1, String s2, boolean b, int i0, int i1, int i2, int i3,
			int i4, int i5) {
		name = s1;
		explain = s2;
		canWait = b;
		canMove = (byte) i0;
		costH = (byte) i1;
		costL = (byte) i2;
		guard = (byte) i3;
		dodge = (byte) i4;
		cure = (byte) i5;
	}
}